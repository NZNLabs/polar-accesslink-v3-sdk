<?php
/**
 * TrainingDataApi
 * PHP version 5
 *
 * @category Class
 * @package  Coachbox\Services\Polar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Polar Accesslink API
 *
 * Polar Accesslink API documentation
 *
 * OpenAPI spec version: 3.28.0
 * Contact: b2bhelpdesk@polar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Coachbox\Services\Polar\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Coachbox\Services\Polar\ApiException;
use Coachbox\Services\Polar\Configuration;
use Coachbox\Services\Polar\HeaderSelector;
use Coachbox\Services\Polar\ObjectSerializer;

/**
 * TrainingDataApi Class Doc Comment
 *
 * @category Class
 * @package  Coachbox\Services\Polar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TrainingDataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation commitExerciseTransaction
     *
     * Commit transaction
     *
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $user_id User identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function commitExerciseTransaction($transaction_id, $user_id)
    {
        $this->commitExerciseTransactionWithHttpInfo($transaction_id, $user_id);
    }

    /**
     * Operation commitExerciseTransactionWithHttpInfo
     *
     * Commit transaction
     *
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $user_id User identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function commitExerciseTransactionWithHttpInfo($transaction_id, $user_id)
    {
        $returnType = '';
        $request = $this->commitExerciseTransactionRequest($transaction_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation commitExerciseTransactionAsync
     *
     * Commit transaction
     *
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $user_id User identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commitExerciseTransactionAsync($transaction_id, $user_id)
    {
        return $this->commitExerciseTransactionAsyncWithHttpInfo($transaction_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation commitExerciseTransactionAsyncWithHttpInfo
     *
     * Commit transaction
     *
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $user_id User identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commitExerciseTransactionAsyncWithHttpInfo($transaction_id, $user_id)
    {
        $returnType = '';
        $request = $this->commitExerciseTransactionRequest($transaction_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'commitExerciseTransaction'
     *
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $user_id User identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function commitExerciseTransactionRequest($transaction_id, $user_id)
    {
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling commitExerciseTransaction'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling commitExerciseTransaction'
            );
        }

        $resourcePath = '/v3/users/{user-id}/exercise-transactions/{transaction-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transaction-id' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user-id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createExerciseTransaction
     *
     * Create transaction
     *
     * @param  int $user_id User identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coachbox\Services\Polar\Models\TransactionLocation
     */
    public function createExerciseTransaction($user_id)
    {
        list($response) = $this->createExerciseTransactionWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation createExerciseTransactionWithHttpInfo
     *
     * Create transaction
     *
     * @param  int $user_id User identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coachbox\Services\Polar\Models\TransactionLocation, HTTP status code, HTTP response headers (array of strings)
     */
    public function createExerciseTransactionWithHttpInfo($user_id)
    {
        $returnType = '\Coachbox\Services\Polar\Models\TransactionLocation';
        $request = $this->createExerciseTransactionRequest($user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coachbox\Services\Polar\Models\TransactionLocation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createExerciseTransactionAsync
     *
     * Create transaction
     *
     * @param  int $user_id User identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createExerciseTransactionAsync($user_id)
    {
        return $this->createExerciseTransactionAsyncWithHttpInfo($user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createExerciseTransactionAsyncWithHttpInfo
     *
     * Create transaction
     *
     * @param  int $user_id User identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createExerciseTransactionAsyncWithHttpInfo($user_id)
    {
        $returnType = '\Coachbox\Services\Polar\Models\TransactionLocation';
        $request = $this->createExerciseTransactionRequest($user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createExerciseTransaction'
     *
     * @param  int $user_id User identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createExerciseTransactionRequest($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling createExerciseTransaction'
            );
        }

        $resourcePath = '/v3/users/{user-id}/exercise-transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user-id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAvailableSamples
     *
     * Get available samples
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coachbox\Services\Polar\Models\Samples
     */
    public function getAvailableSamples($user_id, $transaction_id, $exercise_id)
    {
        list($response) = $this->getAvailableSamplesWithHttpInfo($user_id, $transaction_id, $exercise_id);
        return $response;
    }

    /**
     * Operation getAvailableSamplesWithHttpInfo
     *
     * Get available samples
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coachbox\Services\Polar\Models\Samples, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAvailableSamplesWithHttpInfo($user_id, $transaction_id, $exercise_id)
    {
        $returnType = '\Coachbox\Services\Polar\Models\Samples';
        $request = $this->getAvailableSamplesRequest($user_id, $transaction_id, $exercise_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coachbox\Services\Polar\Models\Samples',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAvailableSamplesAsync
     *
     * Get available samples
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAvailableSamplesAsync($user_id, $transaction_id, $exercise_id)
    {
        return $this->getAvailableSamplesAsyncWithHttpInfo($user_id, $transaction_id, $exercise_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAvailableSamplesAsyncWithHttpInfo
     *
     * Get available samples
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAvailableSamplesAsyncWithHttpInfo($user_id, $transaction_id, $exercise_id)
    {
        $returnType = '\Coachbox\Services\Polar\Models\Samples';
        $request = $this->getAvailableSamplesRequest($user_id, $transaction_id, $exercise_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAvailableSamples'
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAvailableSamplesRequest($user_id, $transaction_id, $exercise_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getAvailableSamples'
            );
        }
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling getAvailableSamples'
            );
        }
        // verify the required parameter 'exercise_id' is set
        if ($exercise_id === null || (is_array($exercise_id) && count($exercise_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exercise_id when calling getAvailableSamples'
            );
        }

        $resourcePath = '/v3/users/{user-id}/exercise-transactions/{transaction-id}/exercises/{exercise-id}/samples';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user-id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transaction-id' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($exercise_id !== null) {
            $resourcePath = str_replace(
                '{' . 'exercise-id' . '}',
                ObjectSerializer::toPathValue($exercise_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExerciseSummary
     *
     * Get exercise summary
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coachbox\Services\Polar\Models\Exercise
     */
    public function getExerciseSummary($user_id, $transaction_id, $exercise_id)
    {
        list($response) = $this->getExerciseSummaryWithHttpInfo($user_id, $transaction_id, $exercise_id);
        return $response;
    }

    /**
     * Operation getExerciseSummaryWithHttpInfo
     *
     * Get exercise summary
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coachbox\Services\Polar\Models\Exercise, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExerciseSummaryWithHttpInfo($user_id, $transaction_id, $exercise_id)
    {
        $returnType = '\Coachbox\Services\Polar\Models\Exercise';
        $request = $this->getExerciseSummaryRequest($user_id, $transaction_id, $exercise_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coachbox\Services\Polar\Models\Exercise',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExerciseSummaryAsync
     *
     * Get exercise summary
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExerciseSummaryAsync($user_id, $transaction_id, $exercise_id)
    {
        return $this->getExerciseSummaryAsyncWithHttpInfo($user_id, $transaction_id, $exercise_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExerciseSummaryAsyncWithHttpInfo
     *
     * Get exercise summary
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExerciseSummaryAsyncWithHttpInfo($user_id, $transaction_id, $exercise_id)
    {
        $returnType = '\Coachbox\Services\Polar\Models\Exercise';
        $request = $this->getExerciseSummaryRequest($user_id, $transaction_id, $exercise_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExerciseSummary'
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getExerciseSummaryRequest($user_id, $transaction_id, $exercise_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getExerciseSummary'
            );
        }
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling getExerciseSummary'
            );
        }
        // verify the required parameter 'exercise_id' is set
        if ($exercise_id === null || (is_array($exercise_id) && count($exercise_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exercise_id when calling getExerciseSummary'
            );
        }

        $resourcePath = '/v3/users/{user-id}/exercise-transactions/{transaction-id}/exercises/{exercise-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user-id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transaction-id' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($exercise_id !== null) {
            $resourcePath = str_replace(
                '{' . 'exercise-id' . '}',
                ObjectSerializer::toPathValue($exercise_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFit
     *
     * Get FIT (beta)
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getFit($user_id, $transaction_id, $exercise_id)
    {
        list($response) = $this->getFitWithHttpInfo($user_id, $transaction_id, $exercise_id);
        return $response;
    }

    /**
     * Operation getFitWithHttpInfo
     *
     * Get FIT (beta)
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFitWithHttpInfo($user_id, $transaction_id, $exercise_id)
    {
        $returnType = 'string';
        $request = $this->getFitRequest($user_id, $transaction_id, $exercise_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFitAsync
     *
     * Get FIT (beta)
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFitAsync($user_id, $transaction_id, $exercise_id)
    {
        return $this->getFitAsyncWithHttpInfo($user_id, $transaction_id, $exercise_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFitAsyncWithHttpInfo
     *
     * Get FIT (beta)
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFitAsyncWithHttpInfo($user_id, $transaction_id, $exercise_id)
    {
        $returnType = 'string';
        $request = $this->getFitRequest($user_id, $transaction_id, $exercise_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFit'
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFitRequest($user_id, $transaction_id, $exercise_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getFit'
            );
        }
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling getFit'
            );
        }
        // verify the required parameter 'exercise_id' is set
        if ($exercise_id === null || (is_array($exercise_id) && count($exercise_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exercise_id when calling getFit'
            );
        }

        $resourcePath = '/v3/users/{user-id}/exercise-transactions/{transaction-id}/exercises/{exercise-id}/fit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user-id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transaction-id' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($exercise_id !== null) {
            $resourcePath = str_replace(
                '{' . 'exercise-id' . '}',
                ObjectSerializer::toPathValue($exercise_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGpx
     *
     * Get GPX
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getGpx($user_id, $transaction_id, $exercise_id)
    {
        list($response) = $this->getGpxWithHttpInfo($user_id, $transaction_id, $exercise_id);
        return $response;
    }

    /**
     * Operation getGpxWithHttpInfo
     *
     * Get GPX
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGpxWithHttpInfo($user_id, $transaction_id, $exercise_id)
    {
        $returnType = 'string';
        $request = $this->getGpxRequest($user_id, $transaction_id, $exercise_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGpxAsync
     *
     * Get GPX
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGpxAsync($user_id, $transaction_id, $exercise_id)
    {
        return $this->getGpxAsyncWithHttpInfo($user_id, $transaction_id, $exercise_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGpxAsyncWithHttpInfo
     *
     * Get GPX
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGpxAsyncWithHttpInfo($user_id, $transaction_id, $exercise_id)
    {
        $returnType = 'string';
        $request = $this->getGpxRequest($user_id, $transaction_id, $exercise_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGpx'
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getGpxRequest($user_id, $transaction_id, $exercise_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getGpx'
            );
        }
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling getGpx'
            );
        }
        // verify the required parameter 'exercise_id' is set
        if ($exercise_id === null || (is_array($exercise_id) && count($exercise_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exercise_id when calling getGpx'
            );
        }

        $resourcePath = '/v3/users/{user-id}/exercise-transactions/{transaction-id}/exercises/{exercise-id}/gpx';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user-id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transaction-id' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($exercise_id !== null) {
            $resourcePath = str_replace(
                '{' . 'exercise-id' . '}',
                ObjectSerializer::toPathValue($exercise_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/gpx+xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/gpx+xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHeartRateZones
     *
     * Get heart rate zones
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coachbox\Services\Polar\Models\Zones
     */
    public function getHeartRateZones($user_id, $transaction_id, $exercise_id)
    {
        list($response) = $this->getHeartRateZonesWithHttpInfo($user_id, $transaction_id, $exercise_id);
        return $response;
    }

    /**
     * Operation getHeartRateZonesWithHttpInfo
     *
     * Get heart rate zones
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coachbox\Services\Polar\Models\Zones, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHeartRateZonesWithHttpInfo($user_id, $transaction_id, $exercise_id)
    {
        $returnType = '\Coachbox\Services\Polar\Models\Zones';
        $request = $this->getHeartRateZonesRequest($user_id, $transaction_id, $exercise_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coachbox\Services\Polar\Models\Zones',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHeartRateZonesAsync
     *
     * Get heart rate zones
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHeartRateZonesAsync($user_id, $transaction_id, $exercise_id)
    {
        return $this->getHeartRateZonesAsyncWithHttpInfo($user_id, $transaction_id, $exercise_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHeartRateZonesAsyncWithHttpInfo
     *
     * Get heart rate zones
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHeartRateZonesAsyncWithHttpInfo($user_id, $transaction_id, $exercise_id)
    {
        $returnType = '\Coachbox\Services\Polar\Models\Zones';
        $request = $this->getHeartRateZonesRequest($user_id, $transaction_id, $exercise_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHeartRateZones'
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHeartRateZonesRequest($user_id, $transaction_id, $exercise_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getHeartRateZones'
            );
        }
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling getHeartRateZones'
            );
        }
        // verify the required parameter 'exercise_id' is set
        if ($exercise_id === null || (is_array($exercise_id) && count($exercise_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exercise_id when calling getHeartRateZones'
            );
        }

        $resourcePath = '/v3/users/{user-id}/exercise-transactions/{transaction-id}/exercises/{exercise-id}/heart-rate-zones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user-id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transaction-id' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($exercise_id !== null) {
            $resourcePath = str_replace(
                '{' . 'exercise-id' . '}',
                ObjectSerializer::toPathValue($exercise_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSamples
     *
     * Get samples
     *
     * @param  string $type_id Sample type id (required)
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coachbox\Services\Polar\Models\Sample
     */
    public function getSamples($type_id, $user_id, $transaction_id, $exercise_id)
    {
        list($response) = $this->getSamplesWithHttpInfo($type_id, $user_id, $transaction_id, $exercise_id);
        return $response;
    }

    /**
     * Operation getSamplesWithHttpInfo
     *
     * Get samples
     *
     * @param  string $type_id Sample type id (required)
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coachbox\Services\Polar\Models\Sample, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSamplesWithHttpInfo($type_id, $user_id, $transaction_id, $exercise_id)
    {
        $returnType = '\Coachbox\Services\Polar\Models\Sample';
        $request = $this->getSamplesRequest($type_id, $user_id, $transaction_id, $exercise_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coachbox\Services\Polar\Models\Sample',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSamplesAsync
     *
     * Get samples
     *
     * @param  string $type_id Sample type id (required)
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSamplesAsync($type_id, $user_id, $transaction_id, $exercise_id)
    {
        return $this->getSamplesAsyncWithHttpInfo($type_id, $user_id, $transaction_id, $exercise_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSamplesAsyncWithHttpInfo
     *
     * Get samples
     *
     * @param  string $type_id Sample type id (required)
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSamplesAsyncWithHttpInfo($type_id, $user_id, $transaction_id, $exercise_id)
    {
        $returnType = '\Coachbox\Services\Polar\Models\Sample';
        $request = $this->getSamplesRequest($type_id, $user_id, $transaction_id, $exercise_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSamples'
     *
     * @param  string $type_id Sample type id (required)
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSamplesRequest($type_id, $user_id, $transaction_id, $exercise_id)
    {
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type_id when calling getSamples'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getSamples'
            );
        }
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling getSamples'
            );
        }
        // verify the required parameter 'exercise_id' is set
        if ($exercise_id === null || (is_array($exercise_id) && count($exercise_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exercise_id when calling getSamples'
            );
        }

        $resourcePath = '/v3/users/{user-id}/exercise-transactions/{transaction-id}/exercises/{exercise-id}/samples/{type-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'type-id' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user-id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transaction-id' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($exercise_id !== null) {
            $resourcePath = str_replace(
                '{' . 'exercise-id' . '}',
                ObjectSerializer::toPathValue($exercise_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTcx
     *
     * Get TCX
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getTcx($user_id, $transaction_id, $exercise_id)
    {
        list($response) = $this->getTcxWithHttpInfo($user_id, $transaction_id, $exercise_id);
        return $response;
    }

    /**
     * Operation getTcxWithHttpInfo
     *
     * Get TCX
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTcxWithHttpInfo($user_id, $transaction_id, $exercise_id)
    {
        $returnType = 'string';
        $request = $this->getTcxRequest($user_id, $transaction_id, $exercise_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTcxAsync
     *
     * Get TCX
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTcxAsync($user_id, $transaction_id, $exercise_id)
    {
        return $this->getTcxAsyncWithHttpInfo($user_id, $transaction_id, $exercise_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTcxAsyncWithHttpInfo
     *
     * Get TCX
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTcxAsyncWithHttpInfo($user_id, $transaction_id, $exercise_id)
    {
        $returnType = 'string';
        $request = $this->getTcxRequest($user_id, $transaction_id, $exercise_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTcx'
     *
     * @param  int $user_id User identifier (required)
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $exercise_id Exercise identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTcxRequest($user_id, $transaction_id, $exercise_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getTcx'
            );
        }
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling getTcx'
            );
        }
        // verify the required parameter 'exercise_id' is set
        if ($exercise_id === null || (is_array($exercise_id) && count($exercise_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exercise_id when calling getTcx'
            );
        }

        $resourcePath = '/v3/users/{user-id}/exercise-transactions/{transaction-id}/exercises/{exercise-id}/tcx';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user-id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transaction-id' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($exercise_id !== null) {
            $resourcePath = str_replace(
                '{' . 'exercise-id' . '}',
                ObjectSerializer::toPathValue($exercise_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.garmin.tcx+xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.garmin.tcx+xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listExercises
     *
     * List exercises
     *
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $user_id User identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Coachbox\Services\Polar\Models\Exercises
     */
    public function listExercises($transaction_id, $user_id)
    {
        list($response) = $this->listExercisesWithHttpInfo($transaction_id, $user_id);
        return $response;
    }

    /**
     * Operation listExercisesWithHttpInfo
     *
     * List exercises
     *
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $user_id User identifier (required)
     *
     * @throws \Coachbox\Services\Polar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Coachbox\Services\Polar\Models\Exercises, HTTP status code, HTTP response headers (array of strings)
     */
    public function listExercisesWithHttpInfo($transaction_id, $user_id)
    {
        $returnType = '\Coachbox\Services\Polar\Models\Exercises';
        $request = $this->listExercisesRequest($transaction_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Coachbox\Services\Polar\Models\Exercises',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listExercisesAsync
     *
     * List exercises
     *
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $user_id User identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listExercisesAsync($transaction_id, $user_id)
    {
        return $this->listExercisesAsyncWithHttpInfo($transaction_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listExercisesAsyncWithHttpInfo
     *
     * List exercises
     *
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $user_id User identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listExercisesAsyncWithHttpInfo($transaction_id, $user_id)
    {
        $returnType = '\Coachbox\Services\Polar\Models\Exercises';
        $request = $this->listExercisesRequest($transaction_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listExercises'
     *
     * @param  int $transaction_id Transaction identifier (required)
     * @param  int $user_id User identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listExercisesRequest($transaction_id, $user_id)
    {
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling listExercises'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling listExercises'
            );
        }

        $resourcePath = '/v3/users/{user-id}/exercise-transactions/{transaction-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transaction-id' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user-id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
