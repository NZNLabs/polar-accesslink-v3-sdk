<?php
/**
 * ExerciseHashId
 *
 * PHP version 5
 *
 * @category Class
 * @package  Coachbox\Services\Polar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Polar Accesslink API
 *
 * Polar Accesslink API documentation
 *
 * OpenAPI spec version: 3.28.0
 * Contact: b2bhelpdesk@polar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Coachbox\Services\Polar\Models;

use \ArrayAccess;
use \Coachbox\Services\Polar\ObjectSerializer;

/**
 * ExerciseHashId Class Doc Comment
 *
 * @category Class
 * @description Training session summary data
 * @package  Coachbox\Services\Polar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExerciseHashId implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'exerciseHashId';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'upload_time' => 'string',
'polar_user' => 'string',
'device' => 'string',
'start_time' => 'string',
'duration' => 'string',
'calories' => 'int',
'distance' => 'float',
'heart_rate' => '\Coachbox\Services\Polar\Models\HeartRate',
'training_load' => 'float',
'sport' => 'string',
'has_route' => 'bool',
'club_id' => 'int',
'club_name' => 'string',
'detailed_sport_info' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'upload_time' => null,
'polar_user' => null,
'device' => null,
'start_time' => null,
'duration' => null,
'calories' => 'int32',
'distance' => 'float',
'heart_rate' => null,
'training_load' => 'float',
'sport' => null,
'has_route' => null,
'club_id' => 'int64',
'club_name' => null,
'detailed_sport_info' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'upload_time' => 'upload-time',
'polar_user' => 'polar-user',
'device' => 'device',
'start_time' => 'start-time',
'duration' => 'duration',
'calories' => 'calories',
'distance' => 'distance',
'heart_rate' => 'heart-rate',
'training_load' => 'training-load',
'sport' => 'sport',
'has_route' => 'has-route',
'club_id' => 'club-id',
'club_name' => 'club-name',
'detailed_sport_info' => 'detailed-sport-info'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'upload_time' => 'setUploadTime',
'polar_user' => 'setPolarUser',
'device' => 'setDevice',
'start_time' => 'setStartTime',
'duration' => 'setDuration',
'calories' => 'setCalories',
'distance' => 'setDistance',
'heart_rate' => 'setHeartRate',
'training_load' => 'setTrainingLoad',
'sport' => 'setSport',
'has_route' => 'setHasRoute',
'club_id' => 'setClubId',
'club_name' => 'setClubName',
'detailed_sport_info' => 'setDetailedSportInfo'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'upload_time' => 'getUploadTime',
'polar_user' => 'getPolarUser',
'device' => 'getDevice',
'start_time' => 'getStartTime',
'duration' => 'getDuration',
'calories' => 'getCalories',
'distance' => 'getDistance',
'heart_rate' => 'getHeartRate',
'training_load' => 'getTrainingLoad',
'sport' => 'getSport',
'has_route' => 'getHasRoute',
'club_id' => 'getClubId',
'club_name' => 'getClubName',
'detailed_sport_info' => 'getDetailedSportInfo'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['upload_time'] = isset($data['upload_time']) ? $data['upload_time'] : null;
        $this->container['polar_user'] = isset($data['polar_user']) ? $data['polar_user'] : null;
        $this->container['device'] = isset($data['device']) ? $data['device'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['calories'] = isset($data['calories']) ? $data['calories'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['heart_rate'] = isset($data['heart_rate']) ? $data['heart_rate'] : null;
        $this->container['training_load'] = isset($data['training_load']) ? $data['training_load'] : null;
        $this->container['sport'] = isset($data['sport']) ? $data['sport'] : null;
        $this->container['has_route'] = isset($data['has_route']) ? $data['has_route'] : null;
        $this->container['club_id'] = isset($data['club_id']) ? $data['club_id'] : null;
        $this->container['club_name'] = isset($data['club_name']) ? $data['club_name'] : null;
        $this->container['detailed_sport_info'] = isset($data['detailed_sport_info']) ? $data['detailed_sport_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Hashed id of the trainining session
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets upload_time
     *
     * @return string
     */
    public function getUploadTime()
    {
        return $this->container['upload_time'];
    }

    /**
     * Sets upload_time
     *
     * @param string $upload_time Time of the transfer from wrist unit to Polar database
     *
     * @return $this
     */
    public function setUploadTime($upload_time)
    {
        $this->container['upload_time'] = $upload_time;

        return $this;
    }

    /**
     * Gets polar_user
     *
     * @return string
     */
    public function getPolarUser()
    {
        return $this->container['polar_user'];
    }

    /**
     * Sets polar_user
     *
     * @param string $polar_user Absolute link to Polar user owning the training
     *
     * @return $this
     */
    public function setPolarUser($polar_user)
    {
        $this->container['polar_user'] = $polar_user;

        return $this;
    }

    /**
     * Gets device
     *
     * @return string
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string $device Polar product used in training
     *
     * @return $this
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time Start time of the training session in local time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string $duration The duration of the training session as specified in ISO8601
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets calories
     *
     * @return int
     */
    public function getCalories()
    {
        return $this->container['calories'];
    }

    /**
     * Sets calories
     *
     * @param int $calories Expended calories during training in kilocalories
     *
     * @return $this
     */
    public function setCalories($calories)
    {
        $this->container['calories'] = $calories;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return float
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param float $distance Distance in meters travelled during training
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets heart_rate
     *
     * @return \Coachbox\Services\Polar\Models\HeartRate
     */
    public function getHeartRate()
    {
        return $this->container['heart_rate'];
    }

    /**
     * Sets heart_rate
     *
     * @param \Coachbox\Services\Polar\Models\HeartRate $heart_rate heart_rate
     *
     * @return $this
     */
    public function setHeartRate($heart_rate)
    {
        $this->container['heart_rate'] = $heart_rate;

        return $this;
    }

    /**
     * Gets training_load
     *
     * @return float
     */
    public function getTrainingLoad()
    {
        return $this->container['training_load'];
    }

    /**
     * Sets training_load
     *
     * @param float $training_load Training load effect to user
     *
     * @return $this
     */
    public function setTrainingLoad($training_load)
    {
        $this->container['training_load'] = $training_load;

        return $this;
    }

    /**
     * Gets sport
     *
     * @return string
     */
    public function getSport()
    {
        return $this->container['sport'];
    }

    /**
     * Sets sport
     *
     * @param string $sport Sport name
     *
     * @return $this
     */
    public function setSport($sport)
    {
        $this->container['sport'] = $sport;

        return $this;
    }

    /**
     * Gets has_route
     *
     * @return bool
     */
    public function getHasRoute()
    {
        return $this->container['has_route'];
    }

    /**
     * Sets has_route
     *
     * @param bool $has_route Boolean indicating if the exercise has route data
     *
     * @return $this
     */
    public function setHasRoute($has_route)
    {
        $this->container['has_route'] = $has_route;

        return $this;
    }

    /**
     * Gets club_id
     *
     * @return int
     */
    public function getClubId()
    {
        return $this->container['club_id'];
    }

    /**
     * Sets club_id
     *
     * @param int $club_id Has value if the exercise is from \"Flow For Club\", otherwise not printed. Value -1 indicates that there were errors finding the club
     *
     * @return $this
     */
    public function setClubId($club_id)
    {
        $this->container['club_id'] = $club_id;

        return $this;
    }

    /**
     * Gets club_name
     *
     * @return string
     */
    public function getClubName()
    {
        return $this->container['club_name'];
    }

    /**
     * Sets club_name
     *
     * @param string $club_name Has value if the exercise is from \"Flow For Club\", otherwise not printed. Value \"Ambiguous club location. Please contact support.\" is printed in case of error (and the club-id is -1).
     *
     * @return $this
     */
    public function setClubName($club_name)
    {
        $this->container['club_name'] = $club_name;

        return $this;
    }

    /**
     * Gets detailed_sport_info
     *
     * @return string
     */
    public function getDetailedSportInfo()
    {
        return $this->container['detailed_sport_info'];
    }

    /**
     * Sets detailed_sport_info
     *
     * @param string $detailed_sport_info String containing the name of a Polar Flow-compatible sport, if one is set for the exercise.
     *
     * @return $this
     */
    public function setDetailedSportInfo($detailed_sport_info)
    {
        $this->container['detailed_sport_info'] = $detailed_sport_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
